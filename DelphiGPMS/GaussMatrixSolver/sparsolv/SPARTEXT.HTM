<HTML>
<HEAD><TITLE>Sparse Solver for Delphi and Borland Pascals</TITLE></HEAD>
<BODY>
<CENTER><h1>Sparse Solver for Delphi and Borland Pascals</h1></CENTER><p>
<A HREF="#INTRODUCTION">Introduction</A><br>
<A HREF="#Using the Unit">Using the Unit</A><br>
<A HREF="#Portability">Portability</A><br>
<A HREF="#Updates for November 1999/September 2002">Updates for November 1999/September 2002</A><br>
<A HREF="#The Author">The Author</A><br>
   <P>
Download the unit
<A HREF="http://www.monash.edu.au/policy/ftp/gpextra/sparsolv.zip">sparsolv.zip (319k) </a>
<br> Includes source, test programs, and all the instructions on this page.
<P>
<A NAME="INTRODUCTION"></A>
<P><h2>1 INTRODUCTION</h2></P>
Unit SparSolv is designed to solve sparse linear systems. These are
equation systems of the form:<P>
A.X = R<P>
where A is the LHS matrix of coefficients size NxN,
R is the RHS vector of constants size N,
and X is a vector of variables size N.<P>
It is designed to save time and space where A is fairly large but
contains few non-zero elements.  A typical example would be the need
to solve 1000 simultaneous linear equations involving 1000 variables,
where each equation used, on average, only 6 variables.  To solve this
system using conventional, non-sparse, methods, one would need to
allocate a 1000x1000 matrix using 8 MB of RAM (it is advisable to use
double precision for larger linear systems).  Even if the RAM was
available, it would take a long time to solve such a large matrix.<P>
Sparse methods save space and time by only storing information about
non-zero elements.  SparSolv maintains an individual linked list for
each equation.  Each node in such a list contains an element value
(Double: 8 bytes), a column number (Integer: 4 bytes) and a pointer (4
bytes) to the next node.  Each node uses 16 bytes, which is twice the
memory used to store one number in a conventional matrix.  So,
pursuing the example above, the 6000 (6 x 1000) non-zero elements
would require only 96 kB of memory.  For SparSolv, the RHS and various
work vectors raise this to 140 kB.<P>
SparSolv solves the linear system by reducing the LHS matrix to
triangular form, using Gaussian elimination.  It chooses the order of
pivot rows and columns in such a way as to minimize the creation of
new non-zero LHS elements.  Nevertheless, such creation is
unavoidable, and so more memory is continually required as the
solution proceeds.  The program TEST1 (see below), which solves the
1000x1000 0.6% density matrix mentioned above eventually required 1.2
MB of RAM, nearly 9 times the initial requirement - although much less
than would be needed by non-sparse methods.<P>
The speed and memory requirements of the algorithm depend not only on
the size and density of the LHS, but also on its structure: the way
the non-zero elements are arranged.  Real-world problems often have a
structure which the algorithm is able to exploit.  As in some other
computer problems (eg, sorting), no one algorithm will be best for all
problems.  I recommend SparSolv for systems of up to 12000 equations
with up to 200000 non-zeros and up to 5% density.  Your mileage will
vary !<P>
The core code of SparSolv has been used by me and colleagues for a
number of years to solve systems of non-linear equations for economic
models.  These may be represented as a matrix equation F(n,x) = 0,
where n is a vector of N endogenous (model-deterimined) variables, x
is a vector of exogenous (user-determined) variables and there are N
equations.  By drawing on contemporary economic data, we usually have
one set of values for n and x which satisfy F.  We wish to find new
values for n corresponding to some other vector of exogenous (policy)
variables y.  We apply the Newton-Raphson recurrence:<p>
 J(n,y).dn - = - F(n,y).<p>
Here J is the Jacobian of F with respect to n, and dn is the vector of
changes to n which we hope will cause the RHS to go to zero.  So J is
our LHS, -F the RHS and we seek to find dn using SparSolv.
<P><h3> 1.1 Further References </h3></P>
To get the best from SparSolv, you have to understand a little linear
algebra.  See:<p>
<UL>
<LI>Introductory:<br>
 Numerical Recipes (Press, Teukolsky, Vetterling and Flannery)
 ISBN 0 521 43108 5</LI>
<LI>Advanced:<br>
 Matrix Computations (Golub and Van Loan) ISBN 0 8018 3772 3</LI>
<LI>Sparse:<br>
 Direct Methods for Sparse Matrices (Duff, Erisman and Reid)
 ISBN 0 521 43108 5</LI>
</UL>
If you want to solve really big systems, you need professional
quality routines such as can be found on NetLib (though see update below). But these
are available in Fortran or C rather than Pascal. I have had good
results creating a Fortran DLL using the Harwell routines (authors
same as last book above) which was called by my Delphi 2.0 program.
This route is really only practical if you are using 32-bit Pascal
such as Delphi 2.0.<p>
<A NAME="Using the Unit"></A>
<P><h2>2 USING THE UNIT </h2></P>
The simplest way to learn how to use the unit may be to study and run
the two example programs:<br>
<UL>
<LI> Test1.dpr: Example of using routines with N = 500.</LI>
<LI> Test2.dpr: Example of using routines with N = 4, showing some of
the errors that could occur.</LI>
<LI> TestMTX.dpr: Windows program which solves matrices stored on disk in MTX format.</LI>
</UL>
<p> The method of storing sparse matrices on disk, or in the non-SparSolv parts
of your program, is up to you. The supplied SparSolv routines create and populate
sparse matrices in a special structure, which you do not need to understand (but if you
want to study how it is done, the source is there). The TestMTX example shows ONE
way of storing data on disk, but you could devise another.
<p>
If run through Delphi 1, Test1 and Test2 will appear as WinCrt [console] text
windows. For Delphi 2 and above, they run as console apps.
Non-Delphi users should rename the files to Test1.pas
and Test2.pas, and compile from the DOS command line.<p>
Unit SparSolv makes available 5 Boolean Functions and 3 procedures,
listed below.  Each function returns True if operation was
successfully completed - otherwise False.  If False is returned, call
the procedure GetErrorMessage to find the reason.  It IS important
that you check the function return values.  <p>
The first step is to call InitStruc to initialize the sparse matrix
storage structure.  Then, call AddLHS and AddRHS a number of times to
set the values for the LHS and RHS.  Then call Solve1 to solve the
system.  Then GetAnswer once for each variable.  Finally call
ReleaseStruc to free the memory that has been used.
<UL>
<LI>function InitStruc(NumEq : Word) : Boolean;<br>
 Creates and initializes sparse matrix structure - call this first.
  NumEq is number of equations/variables.</LI><p>
<LI>function AddLHS(ThisEqu, ThisVar : Word; ThisVal : Double) : Boolean;<br>
 Add an element to sparse matrix for equation ThisEqu and variable ThisVar;
  if such an entry already exists, ThisVal will be added to existing value.</LI><p>
<LI>function AddRHS(ThisEqu : Word; ThisVal : Double) : Boolean;<br>
 Set RHS for equation ThisEqu; if RHS has already been set, ThisVal will be
  added to existing value. YOU MUST SET THE RHS FOR EACH EQUATION,
  even if you set it to zero. </LI><p>
<LI>function Solve1 : Boolean;<br>
  Calculate solutions; sparse matrix is destroyed.</LI><p>
<LI>function GetAnswer(ThisVar : Word; var ThisVal : Double) : Boolean;<br>
 Read solution for variable ThisVar - probably called for each variable in
  turn.</LI> <p>
<LI>procedure ReleaseStruc;<br>
 Releases remaining memory used by sparse matrix structure - call this
  last.</LI><p>
<LI>procedure GetErrorMsg(var S : String; var N1, N2, N3 : Word);<br>
 N1: error number; S: Error Description; N2, N3 : other possibly useful
  numbers.</LI><p>
<LI>procedure ShowMat;<br>
  Displays small sparse matrix.</LI>
</UL>
Unit SparSolv also makes available 3 LongInt variables to assist in
monitoring and controlling memory use:<br>
<UL>
<LI> read SparMemUsed to find no of bytes of heap currently used by routines.</LI>
<LI> read MaxMemUsed to find max no of bytes used so far.</LI>
<LI> set MaxMemToUse: max no of bytes routines are allowed to use: -1
       means no limit: default is 4MB (16-Bit) or 2GB (32-Bit) </LI>
</UL>
<P><h3>2.1 Error Messages </h3></P>
If any of the functions listed above returns false, use
GetErrorMessage to find what the problem was.  Each error number is
called from a unique line of code, so you can search to find where the
error was caused.  The errors will fall into four categories:<p>
1: You forgot to call the routines in the right order:<br>
   Initstruc, AddLHS and AddRHS, Solve1, GetAnswer, ReleaseStruc.<p>
2: You passed out-of-range equation and variable numbers to
   AddLHS, AddRHS or GetAnswer.<p>
3: You ran out of memory.<p>
4: Your matrix was singular. This means that your equation system
   does not uniquely determine all the variables. A matrix is singular if:
<br>
(a) any row or any column is empty or consists only of zeros.
<br>
(b) any row can be expressed as a linear combination
    of some other rows. In that case Gaussian elimination
    will lead to an empty row.
<br>
 (c) Like (b) but for columns.<p>
The supplied program Test2 demonstrates various types of singular
matrix error.<p>
For sparse matrices, we distinguish between structural singularity
(row or col has no elements) and numerical singularity (vital elements
are zero).<p>
In its checking phase Solve1 may fail with 'Empty Row', 'Row without
Variables' or 'Empty Col' messages.  These indicate that rows/cols had
no elements at all.  While scaling the LHS, Solve1 may report 'All-
Zero Row' or 'All-Zero Column'.  This means that rows/cols had
elements, but they were all set to 0.0.  Next Solve1 tries to save
time by identifying variables which occur only once.  If there are 2
or more of these in the same equation, it fails with the 'Two Singles'
message.<p>
Finally, during the main Gaussian elimination phase, Solve1 again
fails if the pivot row has no elements or only zero elements, with
messages 'Structurally Singular' or 'Numerically Singular'
respectively.<p>
Very many singular matrix errors arise from either poor input data or
a poorly conceived equation system.  If you suspect that SparSolv is
wrongly reporting a matrix to be singular, please solve the matrix
using a different routine before complaining to me!<p>
<P><h3>2.2 Limitations of SparSolv:</h3></P>
<UL>
<LI>It only allows one Right Hand Side (RHS) column. Furthermore,
unlike LU routines, you cannot solve once, then backsolve several times
for different RHS. This also rules out iterative improvement.
</LI>
<LI>You cannot save and reuse the pivot sequence - this feature could be added.
</LI>
<LI>It only allows one sparse structure at a time:
You must call ReleaseStruc before calling InitStruc a second time.
</LI>
<LI>It will not solve singular matrices, even if <b>some</b> (but not all) variables
are uniquely determined !
</LI>
</UL>
<A NAME="Portability"></A>
<P><h2>3 PORTABILITY </h2></P>
SparSolv has been tested with the following Pascal versions:<br>
<UL>
<LI> 16-bit real mode Turbo Pascal 7.0 {$VER70}<br>
tpc -b test1.dpr</LI>
<LI> 16-bit protected mode Borland Pascal 7.0  {$VER70} {$DPMI}<br>
bpc -cp -b test1.dpr</LI>
<LI> 16-bit protected mode Borland Pascal for Windows   {$VER70} {$WINDOWS}<br>
bpc -cw -b test1.dpr</LI>
<LI> 16-bit Windows Delphi 1.0    {$VER80} {$WINDOWS}<br>
dcc -b test1.dpr</LI>
<LI> 32-bit Windows Delphi 2.0 {$VER90}<br>
dcc32 -b test1.dpr</LI>
<LI> 32-bit Windows Delphis 3, 5, 6 (see below)</LI>
</UL>
Search the code for the compiler predefined symbols listed above
{$xxxx} for guidance in porting to other dialects.  Also shown are the
command line compilation commands.  It is expected that the code will
port fairly easily to versions of Turbo Pascal prior to 7.0 (although
the real mode does restrict matrix size).  Turbo Pascal for Windows
should be similar to Borland Pascal for Windows.<p>
An old-fashioned programming style has been used - no classes,
objects, or modern syntactical conveniences like BREAK or CONTINUE.
The reason is that even today, (April 97), Borland do not supply a
32-bit Pascal which runs on the DOS and Win3.11 machines which most
people use. For big numerical problems, 32-bit is a big advantage,
but to enjoy that advantage, we have to use Borland-like Pascals,
which are generally a few years behind Borland's development of the
Pascal language. For most of its life, the SparSolv code has been run
on Frontier Software 32-bit Pascal (TP5.0 compatible). There are a
number of similar products (FPK, TMT, GNU, VP/OS2, StoneyBrook, etc).<p>
<A NAME="Updates for November 1999/September 2002"></A>
<P><h2>Updates for November 1999/September 2002</h2></P>
<p>
For November 1999, the code has been revised to accept compiler directives suitable
for Delphis 3, 4 and 5. A problem with a missing "Timer" unit has been fixed.
A new, Windows, program TESTMTX has been added which reads in and solves
matrices in the 'MatrixMarket' MTX format. Three MTX files are supplied. TESTMTX allows you to compare SparSolv
with a similar unit, SparLin, obtainable from:<br>
http://www-rab.larc.nasa.gov/nmp/fNMPhome.htm<br>
Sparlin comes with several more MTX files not included with SparSolv.
<P>
Although considerably less sophisticated, SparSolv compares quite well with SparLin
(which is a port of a NetLib C routine). The following table compares the times
and fillins (non-zeroes added) of the two routines for several MTX files:
<P>
<p>
<PRE>
matrix     size  elements   sparlin       sparlin       sparsolv
                                         diag option
                          secs  fills    secs  fills   secs  fills
mahindas   1258    7687    0.6  (2292)    9.0(118815)   0.1  (3933)
1138_bus   1138    4059    0.3  (1489)    0.0  (1548)   0.0     (0)
memplus   17758  126155   98.0 (25474)    4.2 (29259)  60.1 (19944)
sherman2   1080   23099   31.2(207920)   46.9(326717)   3.8(137530)
test1      2500   19992  222.5(700848)  263.8(950317)  45.0(746263)
Notes: Times are on a PIII 350mhz.
       SparLin has a "use diagonal" option which sometimes helps.
</PRE>
On the whole SparSolv seems faster, which I attribute to the fact that it was developed
in Pascal, while Sparlin was originally in C, a proverbially slow language.
However, what we should really learn from comparisons such as this, is that
no one sparse algorithm is best for all matrices. Sparlin seems to perform
very well on diagonally dominant matrices (like Memplus), less well on more
random matrices (like test1).
<P>
<b>September 2002:</b> minor revisions to accept compiler directives suitable
for Delphi 6. SparSolv seems to run fine in Delphis 3-6, either as part of a
Windows program or in a console program {$APPTYPE console}.<br>
A third MTX example matrix is now included in the package.<br>
Added example program ASOLVER.DPR contributed by Alex Jakushev, showing how to
add exception handling.

<p>
<A NAME="The Author"></A>
<P><h3>The Author</h3></P>
<p>
Complaints and suggestions to
<a href="http://www.monash.edu.au/policy/jmh.htm">Mark.Horridge</a></center><p>
email: Mark.Horridge@BusEco.monash.edu.au<p>
This page courtesy of my work-place:
<a href="index.htm">Centre of Policy Studies</A> at
<A href="http://www.monash.edu.au"> Monash University</A><p>
Last updated 12 Sep 2002. <br>
<p>
<p></font></p>
</BODY>
</HTML>
